from ISHate.augmentation.utils import tagger_pos, speculative_list, add_exp_to_sent
from flair.data import Sentence
from typing import List
import random

# TODO: cand_pos_name is not checked. So you can input a different POS than the
# options we put, let's say NN and it will make undesirable behaviour!
def aav(sent: str,
        cand_pos_name: str = "VB",
        nof_repl_p_cand: int = 2) -> List[str]:
    """
    Data augmentation with method `aav`. It selects all the words in `sent` that
    are POS labeled with `cand_pos_name`. We called these words as candidates.
    Each candidate is selected and new sentences are generated by adding an
    adverb before the candidate. In this case, speculative adverbs are used like
    certainly, likely, and clearly from a previously collected list.
    `cand_pos_name` can indicate verbs or adjectives. That is, the following
    values:

    - VB Verb, base form.
    - VBD Verb, past tense.
    - VBG Verb, gerund or present participle.
    - VBN Verb, past participle.
    - VBP Verb, non-3rd person singular present.
    - VBZ Verb, 3rd person singular present.
    - JJ, Adjective.

    parameters:
        - `sent` (str) sentence to augment.
        - `cand_pos_name` (str) adverb type. Values: 'VB', 'VBD', 'VBG', 'VBN',
          'VBP', 'VBZ', and 'JJ'.
        - `nof_repl_p_cand` (int) number of replacements per candidate. That is,
        per each candidate it creates `nof_repl_p_cand` sentences. For example,
        if `cand_pos_name = 'PER'`, `nof_repl_p_cand = 5` and `sent` has 2 named
        entities PER, `rne` generates 2 * 5 sentences.

    returns:
        - adv_examples (List[str]) list of augmented sentences.
    """
    # If adjectives are going to be modified, do not use `many` and `such`.
    BLACKLIST = ["many", "such"]

    # Create a flair instance Sentence.
    sent_ = Sentence(sent)

    # Tag sentence with POS.
    tagger_pos.predict(sent_)

    # Use speculative adverbs
    adv_list = speculative_list

    chosen_pos = []
    for label in sent_.get_labels("pos"):
        pos_type = label.value
        pos_text = label.data_point.text

        # Check the type of a tagged pos word and save them as candidates.
        if (pos_type == cand_pos_name) and (pos_text.lower() not in BLACKLIST):
            chosen_pos.append(label)

    # Randomly choose `nof_repl_p_cand` adverbs from `adv_list` and replace them
    # for each candidate.
    adv_examples = []
    for pos in chosen_pos:
        candidates = random.sample(adv_list, k=nof_repl_p_cand)

        examples = [
            add_exp_to_sent(sent=sent,
                            exp=change,
                            start_pos=pos.data_point.start_position,
                            end_pos=pos.data_point.end_position,
                            where="before") for change in candidates
        ]
        adv_examples.extend(examples)

    return adv_examples